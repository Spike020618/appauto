pipeline {
    agent { label 'slave-1' }

    options {
        timeout(time: "${timeoutHours}", unit: 'HOURS')
    }

    stages {
        stage('Download Source Code') {
            steps {
                sh "sudo rm -rf appauto; git clone -b ${git_branch} ${git_url}"
                dir('./appauto') {
                    sh 'pip install --upgrade pip'
                    sh 'pip install -e . --break-system-packages -i https://pypi.tuna.tsinghua.edu.cn/simple'
                }
            }
        }

        stage("Run Test") {
            steps {
                script {
                    def buildNumber = env.BUILD_NUMBER
                    def job_name_list = env.JOB_NAME.split('/')
                    echo "job_name_list: ${job_name_list}"
                    echo "buildNumber: ${buildNumber}"

                    dir('./appauto') {
                        sh 'pip install -e . --break-system-packages'
                        sh "appauto run pytest --testpaths ${testpaths}  --notify_user ${notify_user_id} --keyword smoke --report-server=192.168.110.11:9080 --report-url=job/appauto_test_demo/${buildNumber}/allure/"
                    }
                }
            }
        }
    }

    post {
        always {
            dir('./appauto') {
                script {
                    echo "üîç Parsing allure results directory from pytest.ini"
                    def allureResultsDir = sh(
                        script: "grep -Po '(?<=alluredir=)[^\\s]+' pytest.ini || echo 'reports/allure-results'",
                        returnStdout: true
                    ).trim()

                    echo "‚úÖ Detected Allure Results Dir: ${allureResultsDir}"

                    // Optional: ensure dir exists
                    def exists = sh(
                        script: "test -d ${allureResultsDir} && echo true || echo false",
                        returnStdout: true
                    ).trim()

                    if (exists == "true") {
                        echo "üìÅ Allure results directory exists, generating report..."
                        allure([
                            includeProperties: false,
                            jdk: '',
                            reportBuildPolicy: 'ALWAYS',
                            results: [[path: allureResultsDir]]
                        ])
                    } else {
                        echo "‚ö†Ô∏è Warning: Allure results directory not found: ${allureResultsDir}"
                    }
                }
            }
        }
    }
}